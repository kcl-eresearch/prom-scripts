#!/usr/bin/python3
# Gather stats from rsync log files produced by ont-platform-data-offload, and send them to an Influx database
# Xand Meaden, King's College London

import argparse
import datetime
import influxdb
import os
import platform
import re
import sys
import yaml

parser = argparse.ArgumentParser()
parser.add_argument("--config_file", default="/etc/opdo_stats.yaml")
args = parser.parse_args()

try:
    with open(args.config_file) as fh:
        config = yaml.safe_load(fh)
except Exception as e:
    sys.exit(f"Failed loading config file {args.config_file}: {e}")

if "node_name" not in config["general"]:
    config["general"]["node_name"] = platform.node().split(".")[0]

config["offload_service"] = {}

try:
    with open("/etc/systemd/ont-platform-data-offload.conf") as fh:
        offload_service_config = fh.read().splitlines()
except Exception as e:
    sys.exit(f"Failed loading offload service config: {e}")

for line in offload_service_config:
    m = re.match(r"^([A-Z_]+)=(.+)$", line)
    if m:
        config["offload_service"][m.group(1)] = m.group(2)

if not (config["offload_service"]["RSYNC_LOG_DIR"] and os.path.isdir(config["offload_service"]["RSYNC_LOG_DIR"])):
    sys.exit("Could not find rsync logs directory")

processed = []
payload = []

influx_tags = {
    "site": config["general"]["site_name"],
    "node": config["general"]["node_name"],
    "destination_dir": config["offload_service"]["DESTINATION_DIR"],
    "source_dir": config["offload_service"]["SOURCE_DIR"],
}

if "DESTINATION_HOST" in config["offload_service"]:
    influx_tags["destination_host"] = config["offload_service"]["DESTINATION_HOST"]

for entry in os.scandir(config["offload_service"]["RSYNC_LOG_DIR"]):
    matched = False

    m = re.match(r"^rsync_([0-9]+)\.([0-9]+)\.[0-9]+\.log$", entry.name)
    if m:
        timestamp = datetime.datetime.utcfromtimestamp(float(f"{m.group(1)}.{m.group(2)}"))
        timestamp_s = timestamp.strftime("%Y-%m-%dT%H:%M:%SZ")
        timestamp_h = timestamp.strftime("%Y-%m-%dT%H:00:00Z")

        try:
            with open(entry.path) as fh:
                for line in fh:
                    m = re.search(r"sent ([0-9,]+) bytes[\s]+received [0-9,]+ bytes[\s]+([0-9,.]+) bytes/sec$", line.strip())
                    if m:
                        matched = True
                        bytes = int(m.group(1).replace(",", ""))
                        speed = float(m.group(2).replace(",", ""))

        except Exception as e:
            sys.stderr.write(f"Failed reading rsync log file {entry.path}: {e}\n")

        if matched:
            processed.append(entry.path)
            payload.extend([
                {
                    "measurement": "speed",
                    "time": timestamp_s,
                    "fields": {
                        "bytes_per_second": speed,
                    },
                    "tags": influx_tags,
                },
                {
                    "measurement": "bytes",
                    "time": timestamp_s,
                    "fields": {
                        "bytes": bytes,
                    },
                    "tags": influx_tags,
                },
                {
                    "measurement": "speed_hourly",
                    "time": timestamp_h,
                    "fields": {
                        "bytes_per_second": speed,
                    },
                    "tags": influx_tags,
                },
                {
                    "measurement": "bytes_hourly",
                    "time": timestamp_h,
                    "fields": {
                        "bytes": bytes,
                    },
                    "tags": influx_tags,
                }
            ])

if len(payload) == 0:
    sys.exit(0)

try:
    client = influxdb.InfluxDBClient(
        host=config["influxdb"]["host"],
        port=config["influxdb"]["port"],
        username=config["influxdb"]["username"],
        password=config["influxdb"]["password"],
        ssl=True,
        verify_ssl=True
    )
    client.write_points(payload, database=config["influxdb"]["database"])
except Exception as e:
    sys.exit(f"Failed writing to InfluxDB: {e}")

for file in processed:
    os.unlink(file)
