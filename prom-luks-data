#!/bin/bash

set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes

function yes_or_no {
    while true; do
        read -rp "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;
            [Nn]*) echo "Aborted" ; return  1 ;;
        esac
    done
}

warning="WARNING

This script will destroy the the filesystem on /data
in order to replace it with a new encrypted LUKS volume. Any
existing data will be lost. 

You will be prompted to enter a LUKS unlock password at
various points. Please choose something long, easy to
type and easy to remember (4 random words work well, ref:
https://xkcd.com/936/).

Do you wish to proceed?"

# TODO
# - Update script to pick up if exited mid-way, in paricular
#   people may provide the incorrect YES response to cryptsetup
# - Check for and stop docker if running and stop it
# - Check for /data swapfile and swapoff 
# - Are errors printed, e.g. umount failing?
# - Add warning about leaving system in failed state

yes_or_no "$warning" || exit

if ! apt install -y cryptsetup; then
   echo "Unable to install cryptsetup" >&2 
   exit 1
fi

if ! systemctl stop minknow; then
    echo "Unable to stop minknow service" >&2
    exit 1
fi

intermediate_mounts=$(mount | awk '{ print $3 }' | grep intermediate)
if [[ $intermediate_mounts = "" ]]; then
    echo "No intermediate mounts to unmount"
else
    for intermediate_mount in $intermediate_mounts; do
        umount "$intermediate_mount";
    done
fi

if ! umount /data; then
    echo "Unable to umount /data" >&2
    exit 1
fi

# TODO how to resume from here if we aborted cryptsetup step below in previous run
# need to test whether by-label will exist after failure and/or post reboot
data_device_name=$(readlink /dev/disk/by-label/data | grep --only-matching "md.*")
data_device=/dev/"$data_device_name"
wipefs --all "$data_device"
cryptsetup luksFormat --type=luks2 "$data_device"
cryptsetup open "$data_device" data
mkfs.ext4 -L data /dev/mapper/data
sed --in-place --expression 's/UUID=.* \/data/\/dev\/mapper\/data \/data/g' /etc/fstab
systemctl daemon-reload
mount /data
chown prom:prom /data
chmod 775 /data
echo "data $data_device none luks" >> /etc/crypttab
systemctl start minknow
